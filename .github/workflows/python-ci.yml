# Nombre del workflow, aparecerá en la interfaz de GitHub Actions
name: QA Automation Suite CI

# --- Eventos que Disparan el Workflow ---
on:
  # Dispara el workflow cuando se hace un push a las ramas especificadas
  push:
    branches:
      - main # La rama principal donde reside tu código estable
      - develop # Si usas una rama de desarrollo para nuevas funcionalidades
      # - infra/gitignore-y-ci-validado # Si ya la fusionaste a main, puedes removerla de aquí para limpiar
    paths-ignore: # Ignora estos archivos/patrones para disparar el workflow en un 'push'
      - '**.md'   # Ignora todos los archivos Markdown (ej. README.md, CHANGELOG.md)
      - 'docs/**' # Ignora cualquier cambio en una posible carpeta 'docs/'
      - 'LICENSE' # Ignora cambios en el archivo de licencia

  # Dispara el workflow cuando se abre o actualiza un Pull Request hacia las ramas especificadas
  # Para Pull Requests, generalmente querrás que el CI se ejecute en todos los cambios
  # para una validación completa antes de fusionar.
  pull_request:
    branches:
      - main
      - develop
      # - infra/gitignore-y-ci-validado # Si ya la fusionaste a main, puedes removerla de aquí para limpiar

  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub Actions
  workflow_dispatch:

# --- Definición de los Jobs (Trabajos) ---
jobs:
  run_tests_job:
    name: Ejecutar Pruebas Automatizadas
    # Define el sistema operativo del 'runner' (servidor virtual) donde se ejecutará este job
    runs-on: ubuntu-latest

    # --- Pasos del Job ---
    steps:
      # Paso 1: Descarga el código de tu repositorio
      - name: ⬇️ Checkout del Código
        uses: actions/checkout@v4

      # Paso 2: Configura el entorno de Python
      - name: 🐍 Configurar Entorno Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Puedes especificar una versión exacta como '3.10' o '3.11'

      # Paso 3: Instalar dependencias del sistema necesarias
      # (Ejemplo: curl es útil para algunos setups, si no se usa, puede removerse)
      - name: ⚙️ Instalar Dependencias del Sistema (apt-get)
        run: |
          sudo apt-get update
          sudo apt-get install -y curl

      # Paso 4: Instalar las dependencias de Python (librerías)
      - name: 📦 Instalar Dependencias de Python (pip)
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools # Asegura que setuptools esté instalado y actualizado
          pip install -r requirements.txt

      # Paso 5: Recrear los archivos JSON sensibles desde los Secretos de GitHub
      - name: 🔐 Configurar Credenciales de Google desde Secretos (Solo en CI)
        env:
          CLIENT_SECRET_CONTENT: ${{ secrets.GOOGLE_CLIENT_SECRET_JSON }}
          CREDENTIALS_CONTENT: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
          TOKEN_CONTENT: ${{ secrets.GOOGLE_API_TOKEN_JSON }}

        run: |
          mkdir -p config
          echo "${CLIENT_SECRET_CONTENT}" > config/client_secret.json
          echo "${CREDENTIALS_CONTENT}" > config/credentials.json
          echo "${TOKEN_CONTENT}" > config/token.json
          echo "Archivos de credenciales sensibles creados temporalmente para la ejecución de CI."

      # Paso 6: Ejecutar el script principal de tu suite de automatización
      # IMPORTANTE: El 'working-directory' ahora apunta a 'tests/'
      - name: 🚀 Ejecutar Suite de Automatización QA
        working-directory: tests/ # ¡Este es el cambio crucial!
        run: |
          python suite.py
        env:
          BROWSER_HEADLESS: true # Establece a 'true' para CI (recomendado)

      # Paso 7: Subir los artefactos (resultados) del workflow
      # IMPORTANTE: Asegúrate de que la carpeta 'reports/' se cree en la raíz del repositorio
      # o ajusta esta ruta si se crea dentro de 'tests/'. Si `suite.py` crea 'reports/'
      # dentro de 'tests/', entonces la ruta aquí debería ser 'tests/reports/'.
      # Dado que tu estructura original tiene 'reports/' en la raíz, mantendremos eso.
      - name: ⬆️ Subir Reportes como Artefacto
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/