# 📂 .github/workflows/python-ci.yml
# 🐍 Pipeline CI para pruebas automatizadas de Selenium en ambiente controlado

name: 🐍 Python CI - Suite de Automatización QA

on:
  # 🚦 Dispara el workflow en eventos de push y pull_request
  push:
    branches:
      - main
      - develop  # Incluye ramas de desarrollo si se usan
  pull_request:
    branches:
      - main
      - develop  # Revisión automática de PRs en ramas clave como desarrollo 

jobs:
  run_tests_job:
    name: Ejecutar Pruebas Automatizadas
    runs-on: ubuntu-latest  # Usa el runner hospedado más reciente de GitHub

    # ⚙️ Variables de entorno para configurar Selenium o acceso a servicios
    env:
      BROWSER_HEADLESS: true  # Para ejecutar en modo headless sin UI
      # GOOGLE_API_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      # TEST_APP_URL: https://www.ejemplo.com  # URL configurable si aplica

    steps:
      # 📥 Clona el repositorio en el runner
      - name: ⬇️ Clonar el repositorio
        uses: actions/checkout@v4

      # 🧱 Instala dependencias del sistema necesarias para navegador
      - name: 🔧 Instalar dependencias del sistema (Ubuntu 24.04)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            chromium-browser \            # Navegador base para Selenium
            libnss3 \                     # Librerías de compatibilidad
            libxss1 \                     # Requerida por Chromium
            libasound2t64 \               # Corrección clave para evitar errores
            xvfb                          # Virtual framebuffer (headless gráfico opcional)

      # 🐍 Configura Python en el runner con la versión deseada
      - name: 🐍 Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # Puedes cambiar si el proyecto requiere otra version

      # 📦 Instala dependencias del proyecto desde archivos de requisitos
      - name: 📦 Instalar dependencias de Python
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt -r dev-requirements.txt

      # 🔎 Verifica que los paquetes y carpetas necesarias están listos
      - name: 🔍 Validar entorno (paquetes y estructura)
        run: |
          python utils/check_env.py  # Script personalizado para QA pre-run

      # 🧪 Ejecuta las pruebas con reporte HTML y cobertura
      - name: 🧪 Ejecutar pruebas Pytest con HTML y cobertura
        run: |
          pytest \
            --html=reports/report.html \
            --self-contained-html \
            --cov=./tests

      # 📊 Genera reporte de cobertura de código en formato HTML
      - name: 📊 Generar reporte de cobertura HTML
        run: |
          coverage html -d reports/coverage_html  # Genera archivo 'index.html' de cobertura

      # 📤 Publica todos los reportes como artefactos en GitHub Actions
      - name: 📤 Publicar reportes como artefactos
        uses: actions/upload-artifact@v4
        with:
          name: Reportes-QA-Automatizacion  # Nombre del bundle de reportes
          path: reports/                    # Incluye HTML, cobertura y otros archivos
          retention-days: 7                 # Opcional: cuánto tiempo mantenerlos disponibles