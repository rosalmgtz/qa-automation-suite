# Nombre del workflow, aparecer√° en la interfaz de GitHub Actions
name: QA Automation Suite CI

# Define los eventos que disparar√°n este workflow
on:
  # Dispara el workflow cuando se hace un push a la rama 'infra/gitignore-y-ci-validado'
  # Puedes cambiar esto a 'main' o 'develop' una vez que la rama est√© estable.
  push:
    branches:
      - infra/gitignore-y-ci-validado
  # Dispara el workflow cuando se abre o actualiza un Pull Request a las ramas especificadas
  pull_request:
    branches:
      - infra/gitignore-y-ci-validado # Si tienes PRs en esta rama
      - main # Para tus Pull Requests hacia la rama principal
      - develop # Si usas una rama de desarrollo

  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub Actions
  workflow_dispatch:

# Define los 'jobs' (trabajos) que se ejecutar√°n en este workflow
jobs:
  run_tests_job:
    name: Ejecutar Pruebas Automatizadas
    # Define el sistema operativo en el que se ejecutar√° este job
    runs-on: ubuntu-latest

    # Pasos que se ejecutar√°n en este job
    steps:
      # Paso 1: Descarga el c√≥digo de tu repositorio
      # Esto es necesario para que el runner de CI tenga acceso a tus archivos.
      - name: ‚¨áÔ∏è Checkout del C√≥digo
        uses: actions/checkout@v4

      # Paso 2: Configura el entorno de Python
      # Instala la versi√≥n de Python especificada.
      - name: üêç Configurar Entorno Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Utiliza la √∫ltima versi√≥n compatible de Python 3

      # Paso 3: Instalar dependencias del sistema necesarias para Selenium y navegadores
      # WebDriver Manager necesita curl para descargar los drivers
      - name: ‚öôÔ∏è Instalar Dependencias del Sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y curl

      # Paso 4: Instalar las dependencias de Python (librer√≠as)
      # Esto asume que tienes un archivo requirements.txt en la ra√≠z de tu proyecto.
      - name: üì¶ Instalar Dependencias de Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # PASO CRUCIAL: Recrear los archivos JSON sensibles desde los Secretos de GitHub
      # Estos archivos se crean TEMPORALMENTE en la carpeta 'config/' del ambiente de CI.
      # No se suben al repositorio. Se destruyen al finalizar el job.
      - name: üîê Configurar Credenciales de Google desde Secretos (Solo en CI)
        env:
          # Estas variables de entorno en el workflow usan los NOMBRES DE TUS SECRETOS DE GITHUB
          # (¬°Que ya configuraste en Settings > Secrets and variables > Actions!)
          CLIENT_SECRET_CONTENT: ${{ secrets.GOOGLE_CLIENT_SECRET_JSON }}
          CREDENTIALS_CONTENT: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
          TOKEN_CONTENT: ${{ secrets.GOOGLE_API_TOKEN_JSON }} # El nombre del secreto para tu token

        run: |
          # Crea la carpeta 'config' si no existe en el runner de CI
          mkdir -p config
          # Escribe el CONTENIDO de los secretos en archivos con los NOMBRES CORTOS esperados por tu c√≥digo Python
          echo "${CLIENT_SECRET_CONTENT}" > config/client_secret.json
          echo "${CREDENTIALS_CONTENT}" > config/credentials.json
          echo "${TOKEN_CONTENT}" > config/token.json
          echo "Archivos de credenciales sensibles creados temporalmente para la ejecuci√≥n de CI."

      # Paso 6: Depuraci√≥n - Listar la estructura de archivos (Opcional, para verificar)
      # Puedes eliminar este paso una vez que la CI funcione correctamente.
      - name: üîç Depurar - Listar Estructura de Archivos en 'config/'
        run: |
          echo "Contenido del directorio actual:"
          ls -F
          echo ""
          echo "Contenido de la carpeta config/:"
          ls -F config/
          echo ""
          echo "Ruta de trabajo actual:"
          pwd

      # Paso 7: Validar el entorno (usando tu script check_env.py)
      # Este script verificar√° si la estructura de carpetas es la esperada.
      - name: ‚úÖ Validar Entorno y Estructura de Carpetas
        run: |
          python utils/check_env.py

      # Paso 8: Ejecutar las pruebas Pytest
      # Aseg√∫rate de que este comando ejecute tu suite de pruebas.
      # --headless es importante para que el navegador corra sin interfaz gr√°fica en CI.
      - name: üöÄ Ejecutar Pruebas Pytest
        run: |
          pytest --html=reports/report.html --self-contained-html # Ajusta el comando seg√∫n c√≥mo ejecutes tus tests
        env:
          BROWSER_HEADLESS: true # Establece esta variable para que Selenium use el modo headless

      # Paso 9: Subir los artefactos (resultados) del workflow
      # Esto guarda los reportes generados para que puedas descargarlos desde GitHub.
      - name: ‚¨ÜÔ∏è Subir Reportes como Artefacto
        uses: actions/upload-artifact@v4
        with:
          name: test-reports # Nombre del artefacto
          path: reports/      # Ruta de la carpeta que contiene los reportes
          # Nota: 'reports/' debe estar ignorada en tu .gitignore, pero aqu√≠ se sube como artefacto.